// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.draka.hardi.web;

import com.draka.hardi.domain.PolicyCustomer;
import com.draka.hardi.domain.PolicyType;
import com.draka.hardi.domain.PolicyTypeAud;
import com.draka.hardi.web.PolicyTypeController;

import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PolicyTypeController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PolicyTypeController.create(@Valid PolicyType policyType, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, policyType);
            return "policytypes/create";
        }
        uiModel.asMap().clear();
        policyType.persist();
        return "redirect:/policytypes/" + encodeUrlPathSegment(policyType.getPtcId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PolicyTypeController.createForm(Model uiModel) {
        populateEditForm(uiModel, new PolicyType());
        return "policytypes/create";
    }
    
    @RequestMapping(value = "/{ptcId}", produces = "text/html")
    public String PolicyTypeController.show(@PathVariable("ptcId") Integer ptcId, Model uiModel) {
        uiModel.addAttribute("policytype", PolicyType.findPolicyType(ptcId));
        uiModel.addAttribute("itemId", ptcId);
        return "policytypes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PolicyTypeController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("policytypes", PolicyType.findPolicyTypeEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) PolicyType.countPolicyTypes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("policytypes", PolicyType.findAllPolicyTypes(sortFieldName, sortOrder));
        }
        return "policytypes/list";
    }
    @RequestMapping(value = "/ssr/{ptcId}", produces = "text/html")
    public String PolicyTypeController.list2(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder,@PathVariable("ptcId") Integer ptcId, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("policytypeauds", PolicyTypeAud.findPolicyTypeAudEntries(firstResult, sizeNo, sortFieldName, sortOrder,ptcId));
            float nrOfPages = (float) PolicyTypeAud.countPolicyTypeAuds() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
            uiModel.addAttribute("itemId", ptcId);
        } else {
        	
            uiModel.addAttribute("policytypeauds", PolicyTypeAud.findAllPolicyTypeAuds(sortFieldName, sortOrder,ptcId));
            uiModel.addAttribute("itemId", ptcId);
        }
        return "policytypeauds/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PolicyTypeController.update(@Valid PolicyType policyType, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, policyType);
            return "policytypes/update";
        }
        uiModel.asMap().clear();
        policyType.merge();
        return "redirect:/policytypes/" + encodeUrlPathSegment(policyType.getPtcId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{ptcId}", params = "form", produces = "text/html")
    public String PolicyTypeController.updateForm(@PathVariable("ptcId") Integer ptcId, Model uiModel) {
        populateEditForm(uiModel, PolicyType.findPolicyType(ptcId));
        return "policytypes/update";
    }
    
    @RequestMapping(value = "/{ptcId}", method = RequestMethod.DELETE, produces = "text/html")
    public String PolicyTypeController.delete(@PathVariable("ptcId") Integer ptcId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        PolicyType policyType = PolicyType.findPolicyType(ptcId);
        policyType.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/policytypes";
    }
    
    void PolicyTypeController.populateEditForm(Model uiModel, PolicyType policyType) {
        uiModel.addAttribute("policyType", policyType);
        uiModel.addAttribute("policycustomers", PolicyCustomer.findAllPolicyCustomers());
    }
    
    String PolicyTypeController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
