// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.draka.hardi.web;

import com.draka.hardi.domain.Customer;
import com.draka.hardi.domain.PolicyClaim;
import com.draka.hardi.domain.PolicyCustomer;
import com.draka.hardi.domain.PolicyCustomerAud;
import com.draka.hardi.domain.PolicyType;
import com.draka.hardi.web.PolicyCustomerController;

import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PolicyCustomerController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PolicyCustomerController.create(@Valid PolicyCustomer policyCustomer, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, policyCustomer);
            return "policycustomers/create";
        }
        uiModel.asMap().clear();
        policyCustomer.persist();
        return "redirect:/policycustomers/" + encodeUrlPathSegment(policyCustomer.getPId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PolicyCustomerController.createForm(Model uiModel) {
        populateEditForm(uiModel, new PolicyCustomer());
        return "policycustomers/create";
    }
    
    @RequestMapping(value = "/{pId}", produces = "text/html")
    public String PolicyCustomerController.show(@PathVariable("pId") Integer pId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("policycustomer", PolicyCustomer.findPolicyCustomer(pId));
        uiModel.addAttribute("itemId", pId);
        return "policycustomers/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PolicyCustomerController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("policycustomers", PolicyCustomer.findPolicyCustomerEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) PolicyCustomer.countPolicyCustomers() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
            
        } else {
            uiModel.addAttribute("policycustomers", PolicyCustomer.findAllPolicyCustomers(sortFieldName, sortOrder));
            
        }
        addDateTimeFormatPatterns(uiModel);
        return "policycustomers/list";
    }
    
    @RequestMapping(value = "/ssr/{pId}", produces = "text/html")
    public String PolicyCustomerController.list2(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder,@PathVariable("pId") Integer pId, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("policycustomerauds", PolicyCustomerAud.findPolicyCustomerAudEntries(firstResult, sizeNo, sortFieldName, sortOrder,pId));
            float nrOfPages = (float) PolicyCustomerAud.countPolicyCustomerAuds() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
            uiModel.addAttribute("itemId", pId);
        } else {
            uiModel.addAttribute("policycustomerauds", PolicyCustomerAud.findAllPolicyCustomerAuds(sortFieldName, sortOrder,pId));
            uiModel.addAttribute("itemId", pId);
        }
        addDateTimeFormatPatterns(uiModel);
        return "policycustomerauds/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PolicyCustomerController.update(@Valid PolicyCustomer policyCustomer, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, policyCustomer);
            return "policycustomers/update";
        }
        uiModel.asMap().clear();
        policyCustomer.merge();
        return "redirect:/policycustomers/" + encodeUrlPathSegment(policyCustomer.getPId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{pId}", params = "form", produces = "text/html")
    public String PolicyCustomerController.updateForm(@PathVariable("pId") Integer pId, Model uiModel) {
        populateEditForm(uiModel, PolicyCustomer.findPolicyCustomer(pId));
        return "policycustomers/update";
    }
    
    @RequestMapping(value = "/{pId}", method = RequestMethod.DELETE, produces = "text/html")
    public String PolicyCustomerController.delete(@PathVariable("pId") Integer pId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        PolicyCustomer policyCustomer = PolicyCustomer.findPolicyCustomer(pId);
        policyCustomer.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/policycustomers";
    }
    
    void PolicyCustomerController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("policyCustomer_startdate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("policyCustomer_enddate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void PolicyCustomerController.populateEditForm(Model uiModel, PolicyCustomer policyCustomer) {
        uiModel.addAttribute("policyCustomer", policyCustomer);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("customers", Customer.findAllCustomers());
        uiModel.addAttribute("policyclaims", PolicyClaim.findAllPolicyClaims());
        uiModel.addAttribute("policytypes", PolicyType.findAllPolicyTypes());
    }
    
    String PolicyCustomerController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
